!function(e){function r(o){if(t[o])return t[o].exports;var n=t[o]={exports:{},id:o,loaded:!1};return e[o].call(n.exports,n,n.exports,r),n.loaded=!0,n.exports}var t={};return r.m=e,r.c=t,r.p="",r(0)}([function(e,r){"use strict";function t(e,r){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!r||"object"!=typeof r&&"function"!=typeof r?e:r}function o(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function, not "+typeof r);e.prototype=Object.create(r&&r.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),r&&(Object.setPrototypeOf?Object.setPrototypeOf(e,r):e.__proto__=r)}function n(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}var p=function(){function e(e,r){for(var t=0;t<r.length;t++){var o=r[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(r,t,o){return t&&e(r.prototype,t),o&&e(r,o),r}}(),c=function(){function e(r,t){n(this,e),this.propertyA=r,this.propertyB="这里是父类的构造属性B："+t,this.propertyC=function(){return"这里是父类的构造方法C"}}return p(e,[{key:"propertyE",value:function(){return"这里是父类的原型方法E"}}]),e}();c.prototype.propertyD="这里是父类的原型属性D";var u=function(e){function r(e,o,p){n(this,r);var c=t(this,Object.getPrototypeOf(r).call(this,e,o));return c.propertyH="这里是子类的构造属性H："+p,c.propertyI=function(){return"这里是子类的构造方法I"},c}return o(r,e),p(r,[{key:"propertyK",value:function(){return"这里是子类的原型方法K："+this.propertyA}}]),r}(c);u.prototype.propertyJ="这里是子类的原型属性J";var i=new u("参数A","参数B","参数C");console.log(i.propertyA),console.log(i.propertyB),console.log(i.propertyC()),console.log(i.propertyD),console.log(i.propertyE()),console.log(i.propertyH),console.log(i.propertyI()),console.log(i.propertyJ),console.log(i.propertyK())}]);